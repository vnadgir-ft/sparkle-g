#summary SPARKLE-G Pretty Printer and Syntactic Validator for SPARQL built on ANTLR V4

==== Table of Content ====

<wiki:toc max_depth="3" />

= Introduction =

== SPARKLE-G built on ANLTR V4 ==

=== Pretty Printer and Syntactic Validator for the SPARQL 1.1 Query and Update Language ===
The sparkle-g project has released a pretty printer and syntactic validator for the [http://www.w3.org/TR/sparql11-query/ SPARQL 1.1 Query] and 
[http://www.w3.org/TR/2011/WD-sparql11-update-20110512/ Update Language] [http://www.w3.org/2001/sw/DataAccess/ http://sparkle-g.googlecode.com/svn/site/images/sw-sparql-green.png]. The pretty printer and syntactic validator is based on the [http://antlr.org/ ANTLR] framework for constructing recognizers, interpreters, compilers, and translators. The generation of the formatted output text relies on the [http://www.stringtemplate.org/ StringTemplate] template engine. [http://antlr.org/ ANTLR] and 
[http://www.stringtemplate.org/ StringTemplate] have both been crafted by [http://www.cs.usfca.edu/~parrt/ Terence Parr], a professor of computer science at the [http://www.cs.usfca.edu/ University of San Francisco].
 
The concept of Antlr V4 differs dramatically from its predecessors. The effects of these changes on the Sparkle project result in modifications of the grammar for the SPARQL 1.1 Query and Update Language, the omission of the AST generation and a complete new action interface.  
The answer to the question “Why do we need ANTLR V4?” can be found [http://www.antlr.org/wiki/pages/viewpage.action?pageId=29130850 here]. 

=== How to build the Pretty Printer ===
The prerelase uses Ant as build tool. You should have Ant version 1.8 or later installed.
Java 1.6 or later is obligatory. 

Download the sparkle-pretty-printer-all-4.0-beta.jar from the download page of the sparkle-g project. Unpack the  jar archive in a directory of your choice.

{{{
jar xvf sparkle-pretty-printer-all-4.0-beta.jar
}}}

Change into the created sparkle-pretty-printer directory and type on the command line:

{{{
ant all
}}}

You should see a build progress information somehow like this:

{{{
Buildfile: /Users/jp/ws/sparkle-pretty-printer/build.xml

antlr_home:
     [echo] Anltr V4 found in: jar:file:/Users/jp/ws/sparkle-pretty-printer/lib/antlr4/antlr-4.0b4-complete.jar!/org/antlr/v4/Tool.class

init:
    [mkdir] Created dir: /Users/jp/ws/sparkle-pretty-printer/target/classes/com/googlecode/sparkleg
    [mkdir] Created dir: /Users/jp/ws/sparkle-pretty-printer/target/classes/META-INF
    [mkdir] Created dir: /Users/jp/ws/sparkle-pretty-printer/target/dist
    [mkdir] Created dir: /Users/jp/ws/sparkle-pretty-printer/target/dist/javadoc/com/googlecode/sparkleg
    [mkdir] Created dir: /Users/jp/ws/sparkle-pretty-printer/target/test-classes/com/googlecode/sparkleg

clean:

antlr:

compile:
    [javac] Compiling 8 source files to /Users/jp/ws/sparkle-pretty-printer/target/classes
    [javac] /Users/jp/ws/sparkle-pretty-printer/src/main/antlr4/com/googlecode/sparkleg/IdentVisitor.java
    [javac] /Users/jp/ws/sparkle-pretty-printer/src/main/antlr4/com/googlecode/sparkleg/SparqlLexer.java
    [javac] /Users/jp/ws/sparkle-pretty-printer/src/main/antlr4/com/googlecode/sparkleg/SparqlMain.java
    [javac] /Users/jp/ws/sparkle-pretty-printer/src/main/antlr4/com/googlecode/sparkleg/SparqlParser.java
    [javac] /Users/jp/ws/sparkle-pretty-printer/src/main/antlr4/com/googlecode/sparkleg/SparqlParserBaseListener.java
    [javac] /Users/jp/ws/sparkle-pretty-printer/src/main/antlr4/com/googlecode/sparkleg/SparqlParserBaseVisitor.java
    [javac] /Users/jp/ws/sparkle-pretty-printer/src/main/antlr4/com/googlecode/sparkleg/SparqlParserListener.java
    [javac] /Users/jp/ws/sparkle-pretty-printer/src/main/antlr4/com/googlecode/sparkleg/SparqlParserVisitor.java

manifest:

dist:
      [jar] Building jar: /Users/jp/ws/sparkle-pretty-printer/target/dist/sparql4.jar

doc:
  [javadoc] Generating Javadoc
  [javadoc] Javadoc execution
  [javadoc] Loading source files for package com.googlecode.sparkleg...
  [javadoc] Constructing Javadoc information...
  [javadoc] Standard Doclet version 1.7.0_05
  [javadoc] Building tree for all the packages and classes...
  [javadoc] Building index for all the packages and classes...
  [javadoc] Building index for all classes...

run:
     [echo] running com.googlecode.sparkleg.Main with testfile input.rq

all:

BUILD SUCCESSFUL
Total time: 26 seconds
}}}

The run task opens a tree view of the example query contained in the input.rq file. Press the OK-Button to close the window. 

=== Executing the Provided Tiny Example Program ===

Assemble the following jar-files in a directory of your choice: 

 * antlr-4.0b4-complete.jar
 * sparql4.jar 

Copy the ident.stg file and the query file input.rq into the directory, too. 
Execute the following command: 

The Windows way
{{{
java -cp antlr-4.0b4-complete.jar;sparql4.jar SparqlMain input.rq
}}}

The Unix way
{{{
java -cp antlr-4.0b4-complete.jar:sparql4.jar SparqlMain input.rq
}}}

You should receive the following output:

{{{
Work on file input.rq
Tokens: -------------------------------
Number of tokens 68
TokenList: -------------------------------
[@0,0:5='PREFIX',<3>,1:0]
[@1,6:6=' ',<1>,channel=99,1:6]
[@2,7:9='dc:',<116>,1:7]
[@3,10:12='   ',<1>,channel=99,1:10]
[@4,13:46='<http://purl.org/dc/elements/1.1/>',<115>,1:13]
[@5,47:49=' \r\n',<1>,channel=99,1:47]
[@6,50:55='PREFIX',<3>,2:0]
[@7,56:56=' ',<1>,channel=99,2:6]
[@8,57:57=':',<116>,2:7]
[@9,58:62='     ',<1>,channel=99,2:8]
[@10,63:88='<http://example.org/book/>',<115>,2:13]
[@11,89:91=' \r\n',<1>,channel=99,2:39]
[@12,92:97='PREFIX',<3>,3:0]
...
Input from token list: -------------------------------
PREFIX dc:   <http://purl.org/dc/elements/1.1/> 
PREFIX :     <http://example.org/book/> 
PREFIX ns:   <http://example.org/ns#> 

SELECT ?book ?title ?price
{
   ?book dc:title ?title ;
         ns:price ?price .
}
Values (?book ?title) {
 (UNDEF "SPARQL Tutorial")
 (:book2 UNDEF)
}Start parsing: -------------------------------
Parse tree: -------------------------------
(query (prologue (prefixDecl PREFIX dc: <http://purl.org/dc/elements/1.1/>) (prefixDecl PREFIX : <http://example.org/book/>) (prefixDecl PREFIX ns: <http://example.org/ns#>)) (selectQuery (selectClause SELECT (selectVariables (var ?book)) (selectVariables (var ?title)) (selectVariables (var ?price))) (whereClause (groupGraphPattern { (groupGraphPatternSub (triplesBlock (triplesSameSubjectPath (varOrTerm (var ?book)) (propertyListPathNotEmpty (verbPath (path (pathAlternative (pathSequence (pathEltOrInverse (pathElt (pathPrimary (iri (prefixedName dc:title))))))))) (objectListPath (objectPath (graphNodePath (varOrTerm (var ?title))))) ; (propertyListPathNotEmptyList (verbPath (path (pathAlternative (pathSequence (pathEltOrInverse (pathElt (pathPrimary (iri (prefixedName ns:price))))))))) (objectList (object (graphNode (varOrTerm (var ?price)))))))) .)) })) solutionModifier) (valuesClause Values (dataBlock (inlineDataFull ( (var ?book) (var ?title) ) { (dataBlockValues ( (dataBlockValue UNDEF) (dataBlockValue (rdfLiteral (string "SPARQL Tutorial"))) )) (dataBlockValues ( (dataBlockValue (iri (prefixedName :book2))) (dataBlockValue UNDEF) )) }))) <EOF>)
Read StringTemplate Group File: ident.stg-------------------------------
Emit reformatted query: -------------------------------
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX : <http://example.org/book/>
PREFIX ns: <http://example.org/ns#>

SELECT ?book ?title ?price
WHERE {
   ?book dc:title ?title;
         ns:price ?price
}
VALUES (?book ?title) {
   (UNDEF "SPARQL Tutorial")
   (:book2 UNDEF)
}
Emit original query: -------------------------------
PREFIX dc:   <http://purl.org/dc/elements/1.1/> 
PREFIX :     <http://example.org/book/> 
PREFIX ns:   <http://example.org/ns#> 

SELECT ?book ?title ?price
{
   ?book dc:title ?title ;
         ns:price ?price .
}
Values (?book ?title) {
 (UNDEF "SPARQL Tutorial")
 (:book2 UNDEF)
}-------------------------------
Number of errors encountered: 0
}}}


=== Syntax Highlighting ===

Switching to the StringTemplate group file html.stg renders a query in a simple HTML format.

An example of a reformatted query is shown here:

http://sparkle-g.googlecode.com/svn/site/images/HTML-Formatted-Query.png

The colors, fonts, etc. can be adapted without modification of Java code, just by editing the html.stg template.