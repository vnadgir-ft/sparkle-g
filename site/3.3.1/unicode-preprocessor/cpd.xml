<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="196" tokens="825">
<file line="88" path="C:\Development\projects\ws\Sparql52\unicode-preprocessor\src\main\java\org\antlr\runtime\SparkleUnicodePreprocessorFileStream.java"/>
<file line="62" path="C:\Development\projects\ws\Sparql52\unicode-preprocessor\src\main\java\org\antlr\runtime\SparkleUnicodePreprocessorStringStream.java"/>
<codefragment>
<![CDATA[
    }

    /**
     * Finite state automaton for replacing Unicode escape sequences '\\uxxxx'
     * with character values. Incomplete Unicode escape sequences are left as
     * found in the file stream.
     * Optimizations to avoid write operations lead to MODIFIED_DATA_STATE
     * and data_buffer_modified. The rationale for deviations from pure doctrine
     * where to keep the number of status small.
     * In the usual case of no Unicode escape sequences in the data stream
     * the maxime is to do (almost) nothing, just loop in the START_STATE.
     * @param n number of characters read into data buffer
     */
    private int convertUnicodeLiteralToChar(int n) {

        final int START_STATE = 1;
        final int MODIFIED_DATA_STATE = START_STATE + 1;
        final int START_OF_ESCAPE = MODIFIED_DATA_STATE + 1;
        final int UNICODE_NIBBLE1 = START_OF_ESCAPE + 1;
        final int UNICODE_NIBBLE2 = UNICODE_NIBBLE1 + 1;
        final int UNICODE_NIBBLE3 = UNICODE_NIBBLE2 + 1;
        final int UNICODE_NIBBLE4 = UNICODE_NIBBLE3 + 1;

        int state = START_STATE;
        boolean data_buffer_modified = false;

        int ucount = 0;

        char u1 = 0, u2 = 0, u3 = 0, c = 0;

        int i = 0, j = 0;
        while (i < n) {
            c = data[i++];
            switch (state) {
                case START_STATE:
                    if (c == '\\') {
                        j = i - 1;
                        state = START_OF_ESCAPE;
                    }
                    break;
                case MODIFIED_DATA_STATE:
                    if (c != '\\') {
                        data[j++] = c;
                    } else {
                        state = START_OF_ESCAPE;
                    }
                    break;
                case START_OF_ESCAPE:
                    if (c != 'u') {
                        if (data_buffer_modified) {
                            data[j++] = '\\';
                            data[j++] = c;
                            state = MODIFIED_DATA_STATE;
                        } else {
                            state = START_STATE;
                        }
                    } else {
                        ucount = 1;
                        state = UNICODE_NIBBLE1;
                    }
                    break;
                case UNICODE_NIBBLE1:
                    if (isHexadecimalDigit(c)) {
                        u1 = c;
                        state = UNICODE_NIBBLE2;
                    } else if (c == 'u') {
                        ucount++;
                    } else {
                        if (data_buffer_modified) {
                            data[j++] = '\\';
                            for (int k = 0; k < ucount; k++) {
                                data[j++] = 'u';
                            }
                            data[j++] = c;
                            state = MODIFIED_DATA_STATE;
                        } else {
                            state = START_STATE;
                        }
                    }
                    break;
                case UNICODE_NIBBLE2:
                    if (isHexadecimalDigit(c)) {
                        u2 = c;
                        state = UNICODE_NIBBLE3;
                    } else {
                        if (data_buffer_modified) {
                            data[j++] = '\\';
                            for (int k = 0; k < ucount; k++) {
                                data[j++] = 'u';
                            }
                            data[j++] = u1;
                            data[j++] = c;
                            state = MODIFIED_DATA_STATE;
                        } else {
                            state = START_STATE;
                        }
                    }
                    break;
                case UNICODE_NIBBLE3:
                    if (isHexadecimalDigit(c)) {
                        u3 = c;
                        state = UNICODE_NIBBLE4;
                    } else {
                        if (data_buffer_modified) {
                            data[j++] = '\\';
                            for (int k = 0; k < ucount; k++) {
                                data[j++] = 'u';
                            }
                            data[j++] = u1;
                            data[j++] = u2;
                            data[j++] = c;
                            state = MODIFIED_DATA_STATE;
                        } else {
                            state = START_STATE;
                        }
                    }
                    break;
                case UNICODE_NIBBLE4:
                    if (isHexadecimalDigit(c)) {
                        if (!data_buffer_modified) {
                            data_buffer_modified = true;
                        }
                        data[j++] = (char) ((((((map[u1] << 4) + map[u2]) << 4) + map[u3]) << 4) + map[c]);
                        state = MODIFIED_DATA_STATE;
                    } else {
                        if (data_buffer_modified) {
                            data[j++] = '\\';
                            for (int k = 0; k < ucount; k++) {
                                data[j++] = 'u';
                            }
                            data[j++] = u1;
                            data[j++] = u2;
                            data[j++] = u3;
                            data[j++] = c;
                            state = MODIFIED_DATA_STATE;
                        } else {
                            state = START_STATE;
                        }
                    }
                    break;
            }
        }
        // afterthoughts
        if (data_buffer_modified) {
            switch (state) {
                case START_OF_ESCAPE:
                    data[j++] = '\\';
                    break;
                case UNICODE_NIBBLE1:
                    data[j++] = '\\';
                    for (int k = 0; k < ucount; k++) {
                        data[j++] = 'u';
                    }
                    break;
                case UNICODE_NIBBLE2:
                    data[j++] = '\\';
                    for (int k = 0; k < ucount; k++) {
                        data[j++] = 'u';
                    }
                    data[j++] = u1;
                    break;
                case UNICODE_NIBBLE3:
                    data[j++] = '\\';
                    for (int k = 0; k < ucount; k++) {
                        data[j++] = 'u';
                    }
                    data[j++] = u1;
                    data[j++] = u2;
                    break;
                case UNICODE_NIBBLE4:
                    data[j++] = '\\';
                    for (int k = 0; k < ucount; k++) {
                        data[j++] = 'u';
                    }
                    data[j++] = u1;
                    data[j++] = u2;
                    data[j++] = u3;
                    break;
            }
            n = j;
        }
        return n;
    }

    /**
     * Determines if a character is a legal hexadecimal digit
     * @param c c is a legal hexadecimal digit if:
     *          c is in '0'..'9' or
     *          c is in 'a'..'f' or
     *          c is in 'A'..'F'
     * @return true if c is a hexadecimal digit else false
     */
    private boolean isHexadecimalDigit(final char c) {
        return (c <= 'f' && map[c] >= 0);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="367">
<file line="30" path="C:\Development\projects\ws\Sparql52\unicode-preprocessor\src\main\java\org\antlr\runtime\SparkleUnicodePreprocessorFileStream.java"/>
<file line="30" path="C:\Development\projects\ws\Sparql52\unicode-preprocessor\src\main\java\org\antlr\runtime\SparkleUnicodePreprocessorStringStream.java"/>
<codefragment>
<![CDATA[
public class SparkleUnicodePreprocessorStringStream extends ANTLRStringStream {

    static int[] map = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1,
        0, 10, 11, 12, 13, 14, 15, 16, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 10, 11, 12, 13, 14, 15, 16, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

    /**
     * 
     * @param fileName
     * @throws IOException
     */
    public SparkleUnicodePreprocessorStringStream(String input) {
]]>
</codefragment>
</duplication>
</pmd-cpd>