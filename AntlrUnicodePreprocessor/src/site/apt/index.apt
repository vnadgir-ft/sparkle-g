~~
~~   Copyright 2007-2010 The sparkle-g Team
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~

~~author: Simone Tripodi
~~version: $Id: index.apt 123 2010-06-06 14:06:49Z simone.tripodi $
                                    ------
                                    Introduction
                                    ------
                                    Simone Tripodi
                                    ------
                                     2007-2010

Introduction

  The SPARQL query language for RDF is designed to meet the use cases and
  requirements identified by the RDF Data Access Working Group in RDF Data
  Access Use Cases and Requirements; detailed explanations can be found on the
  official W3C's SPARQL {{{http://www.w3.org/TR/rdf-sparql-query/}specifications}}

  Purpose of this project is provide a cross-compiler ANTRL v3 grammar which
  is an implementation of the SPARQL grammar {{{http://www.w3.org/TR/rdf-sparql-query/#grammar}specifications}}.

Sub-project of the sparkle-g project

  Preprocessor to convert Unicode literals into character values extending ANTLRFileStream.

  The ANTLRUnicodePreprocessorFileStream class will convert unicode escape sequences into
  character values. The input stream is preprocessed before a SPARQL request is passed to
  the Sparkle grammar.  
  
  The preprocessor for replacing Unicode escape sequences '\\uxxxx' 
  with character values is implemented as a Finite State Automaton.
  Incomplete Unicode escape sequences are written back unchanged into the file stream.
  Optimizations to avoid write operations lead to MODIFIED_DATA_STATE 
  and data_buffer_modified. The rationale for deviations from pure doctrine 
  where to keep the number of status small.
  In the usual case of no Unicode escape sequences in the data stream 
  the maxime is to do (almost) nothing, just loop in the START_STATE. 
